{"version":3,"sources":["CurrencyRow.js","Graph.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectCurrency","onChangeCurrency","onChangeAmount","amount","currencySymbols","select","optionValue","filter","value","undefined","map","option","index","type","className","onChange","Graph","dataRates","toCurrency","data","Object","entries","d","day","push","style","fontFamily","textAlign","LineChart","width","height","margin","top","right","bottom","left","Line","dataKey","stroke","dot","CartesianGrid","strokeDasharray","XAxis","YAxis","domain","dataMin","toFixed","dataMax","date","Date","currentDate","getTime","getTimezoneOffset","toISOString","split","startDate","setMonth","getMonth","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","setCurrencySymbols","histRates","setHistRates","API","API_DATE","useEffect","fetch","then","res","json","firstCurrency","keys","rates","base","symbols","e","target","changeRate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69aeb0a7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CurrencyRow = (props) => {\r\n\r\n    const {currencyOptions, selectCurrency, onChangeCurrency, onChangeAmount, amount, currencySymbols, select} = props;\r\n    \r\n    //remove undefined values\r\n    const currencyName = currencyOptions.filter(value =>{\r\n        return currencySymbols[value] !== undefined\r\n    })\r\n    \r\n    const optionValue = currencyName.map((option, index) => (\r\n        <option key={index} value={option}>{`${currencySymbols[option]} (${option})`}</option>\r\n    ));\r\n\r\n    return ( \r\n\r\n        <div>\r\n            <input \r\n                type=\"number\" \r\n                className=\"input\" \r\n                value={amount} \r\n                onChange={onChangeAmount}\r\n                \r\n            />\r\n            <select \r\n                value={selectCurrency} \r\n                onChange={onChangeCurrency}\r\n                select={select}\r\n            >\r\n                {optionValue}\r\n            </select>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default CurrencyRow;","import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from \"recharts\";\r\n\r\nconst Graph = ({dataRates, toCurrency}) => {\r\n    const styles = {\r\n        fontFamily: \"sans-serif\",\r\n        textAlign: \"center\"\r\n      };\r\n      \r\n    const data = [];\r\n    \r\n    const values = Object.entries(dataRates);\r\n    values.map((value) => {\r\n        let d = {\r\n            day: value[0],\r\n            value: value[1][toCurrency],\r\n        }\r\n        return data.push(d)\r\n    })\r\n    \r\n    return ( \r\n        \r\n        <div style={styles}>\r\n        <LineChart\r\n          width={900}\r\n          height={300}\r\n          data={data}\r\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\r\n        >\r\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" dot={false}/>\r\n          <CartesianGrid stroke=\"#444\" strokeDasharray=\"6 6\" />\r\n          <XAxis dataKey=\"day\" />\r\n          <YAxis type=\"number\" domain={[dataMin => (dataMin.toFixed(3)), dataMax => (dataMax.toFixed(3))]} dataKey='value'/>\r\n        </LineChart>\r\n      </div>\r\n     );\r\n}\r\n \r\nexport default Graph;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow';\nimport Graph from './Graph';\n\n  let date = new Date();\n  //set end date format for api \n  let currentDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000 )).toISOString().split(\"T\")[0];\n  //set start date format for api\n  let startDate = new Date(date.setMonth(date.getMonth()-12)- (date.getTimezoneOffset() * 60000 )).toISOString().split(\"T\")[0];\n  \n  \nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\n  const [currencySymbols, setCurrencySymbols] = useState([]);\n  const [histRates, setHistRates] = useState([]);\n \n  const API = `https://api.exchangerate.host/latest?base=${fromCurrency}`;\n  const API_DATE = `https://api.exchangerate.host/timeseries?base=${fromCurrency}&start_date=${startDate}&end_date=${currentDate}`\n  const API_SYMBOLS = 'http://api.exchangeratesapi.io/v1/symbols?access_key=10b30a08b12abdf7a71f042bfffa368c';\n\n  let toAmount, fromAmount;\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = (amount * exchangeRate).toFixed(2);\n  }else{\n    toAmount = amount;\n    fromAmount = (amount / exchangeRate).toFixed(2);\n  }\n\n  useEffect(() => {\n    fetch(API)\n    .then(res => res.json())\n    .then(data => {\n      const firstCurrency = Object.keys(data.rates)[150]\n      setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n      setFromCurrency(data.base)\n      setToCurrency(firstCurrency)\n      setExchangeRate(data.rates[firstCurrency])\n    })\n  }, [])// eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    \n    if (fromCurrency && toCurrency) {\n      fetch(API)\n      .then(res => res.json())\n      .then(data => {\n          setExchangeRate(data.rates[toCurrency])\n      })\n    }\n  },[fromCurrency, toCurrency])// eslint-disable-line react-hooks/exhaustive-deps\n  \n  useEffect(() =>{\n    fetch(API_DATE)\n    .then(res => res.json())\n    .then(data =>{\n      setHistRates(data.rates)\n    })\n  },[fromCurrency])// eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    fetch(API_SYMBOLS)\n    .then(res => res.json())\n    .then(data => {\n      setCurrencySymbols(data.symbols)\n      \n    })\n  },[])\n\n  function handleFromAmountChange(e) {\n    \n    let changeRate = e.target.value;\n    if (changeRate > 0) {\n      setAmount(changeRate);\n      setAmountInFromCurrency(true);\n    }else return changeRate = 1;\n  }\n\n  function handleToAmountChange(e) {\n    let changeRate = e.target.value;\n    if (changeRate > 0) {\n      setAmount(changeRate);\n      setAmountInFromCurrency(false);\n    }else return changeRate = 1;\n    \n  }\n\n  return (\n    <>\n    <div className=\"container\">\n      <h1>Currency Calculator</h1>\n      <hr/>\n      <h4>Date: {currentDate}</h4>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectCurrency={fromCurrency}\n        currencySymbols={currencySymbols}\n        select=\"disable\"\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <div className=\"equals\">=</div>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectCurrency={toCurrency}\n        currencySymbols={currencySymbols}\n        select=\"enable\"\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n      <Graph \n        dataRates={histRates} \n        toCurrency={toCurrency}\n      />\n    </div>\n    \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}